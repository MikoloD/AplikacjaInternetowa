@model List<App.Models.IssueModel>
@using Microsoft.AspNetCore.Http;
@{
    ViewData["Title"] = "Home Page";

}
<div class="row mr-5">
    <div class="col-sm" id="map" style="width: 100%;height: calc(100vh - 55px);position: relative;overflow: hidden;">
    </div>
    <div class="col-sm">
        @*<div class="row">
            <div class="col-sm">
                <label for="reported">Zgłoszone</label>
                <input id="reported" type="checkbox" checked="" />
            </div>
            <div class="col-sm">
                <label for="inProgress">W realizacji</label>
                <input id="inProgress" type="checkbox" checked="" />
            </div>
            <div class="col-sm">
                <label for="archive">Zakończone</label>
                <input id="archive" type="checkbox"/>
            </div>
            <div class="col-sm">
                <button class="btn-primary">Zakończone</button>
            </div>
        </div>*@
        <table class="table">
            <thead>
                <tr>
                    <th class="col-2">
                        @Html.DisplayNameFor(model => model.First().Date)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.First().Description)
                    </th>
                    <th class="col-2">
                        Stan
                    </th>
                    <th class="col-1">
                        Pokaż
                    </th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model.OrderBy(x=>x.State).ThenByDescending(x=>x.Date))
                {
                    string date = item.Date.ToString("MM.dd.yyyy H:mm");
                    string state = "";
                    switch (item.State)
                    {
                        case State.Reported:
                            state = "<span class='statusRed'>Zgłoszone</span>";
                            break;
                        case State.InProgress:
                            state = "<span class='statusGreen'>W realizacji</span>";
                            break;
                        case State.Finished:
                            state = "<span class='statusGray'>Zakończone</span>";
                            break;
                    }

                    <tr>
                        <td class="col-2">
                            @Html.Raw(date)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Description)
                        </td>
                        <th class="col-2">
                            @Html.Raw(state)
                        </th>
                        <td class="col-1">
                            <button class="btn-primary" onclick="clickMarker(@item.IssueId)">Podgląd</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

</div>
<script>

    function listRelaod() {
        var selects = document.getElementById("issueList");
        return selects.options[selects.selectedIndex].value;
    }
    function clickMarker(id) {
        $('img[alt='+id+']').click()
    }
    function maintain(id) {
        window.location.href = '@Url.Action("AddMalfunction", "Malfunction")/' + id;
    }
    function listPhotos(photos) {
        var result = "";
        for (var i = 0; i < photos.length; i++) {
            if (photos[i] != undefined) {

                result = result + '<div class="col-sm-6 col-md-4 col-lg-3"><div style="padding-left:10px;display: block;min-width: 64px;min-height: 64px;">'+
                    '<a href = "get.image?img=' + photos[i] + '" data-lightbox="photos" > <img class="" style="width: 100%;height: 100%;border: solid;display: block;" src="get.image?img=' + photos[i] + '"></a></div ></div > '
            }

        }
        return result;
    }
    var id = [];
    var lat = [];
    var lon = [];
    var date = [];
    var desc = [];
    var state = [];
    var photo = [];
    @for (int i = 0; i < Model.Count; i++)
    {
        var item = Model[i];
        if(item.Description != null && item.Description.Length > 20)
        {
            item.Description = item.Description.Substring(0, 20);
        }
        @:id.push("@item.IssueId");
        @:lat.push("@item.Latitude");
        @:lon.push("@item.Longitude");
        @:date.push("@item.Date.ToString("MM.dd.yyyy H:mm")");
        @:desc.push("@item.Description");
        @:state.push("@((int)item.State)");
        @:var i = ("@i");
        @if(item.Images.Count > 0) {
            @:photo[i] = [];
            @for (int j = 0; j < item.Images.Count; j++)
            {
                if(item.Images[j].Image != null)
                    {
                @:var j = ("@j");
                @:photo[i][j] = ("@item.Images[j].MultimediumId");
                    }
                }
            }
    }
        var map = L.map('map').setView([49.821944, 19.044444], 11);

        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
        }).addTo(map);

    var markers = [];


    var myIcon = new L.Icon({
        iconUrl: 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-red.png',
        shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/images/marker-shadow.png',
        iconSize: [25, 41],
        iconAnchor: [12, 41],
        popupAnchor: [1, -34],
        shadowSize: [41, 41]
    });
    for (var i = 0; i < id.length; i++) {
        var lista = "";
        if (photo[i] != undefined)
        {
            lista = listPhotos(photo[i]);
            
            lista.replace("undefined","");
        }
        console.log(lista);
        if (state[i] == 1) {
            var myIcon = new L.Icon({
                iconUrl: 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-green.png',
                shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/images/marker-shadow.png',
                iconSize: [25, 41],
                iconAnchor: [12, 41],
                popupAnchor: [1, -34],
                shadowSize: [41, 41]
            });
        }
        else {
            var myIcon = new L.Icon({
                iconUrl: 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-2x-red.png',
                shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/images/marker-shadow.png',
                iconSize: [25, 41],
                iconAnchor: [12, 41],
                popupAnchor: [1, -34],
                shadowSize: [41, 41]
            });
        }
            var popup = L.popup().setContent(
                "<table>" +
                "<tr><th>Zgłoszenie</th></tr>" +
                "<tr><td>Zgłoszenie nr </td><td><b>" + id[i] + "</b></td></tr>" +
                "<tr><td>Opis </td><td><b>" + desc[i] + "</b></td></tr>" +
                "<tr><td>Data zgłoszenia </td><td><b>" + date[i] + "</b></td></tr>" +
                "</table>" +
                '<div class="row"><div class="photo-gallery"><div class="container"><div class="row photos">' +
                lista
                +
                '</div></div></div></div>' +
                '<div class="text-center">'+
                '<button class="btn-primary btn-popup center-block" onclick="maintain('+id[i]+')">Obsłuż</button></div>'
            );
        var marker = L.marker([lat[i], lon[i]], { icon: myIcon, alt: id[i] })
        markers.push(marker);
        marker.addTo(map)
            .bindPopup(popup);

    }

</script>
